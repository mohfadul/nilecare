/**
 * Clinical Alert Model
 * 
 * Represents clinical decision support alerts
 * Tracks all safety alerts generated by the CDS system
 */

export interface Alert {
  id: string;
  patientId: string;
  facilityId?: string; // For multi-facility support
  organizationId?: string;
  
  // Alert details
  alertType: 'drug-interaction' | 'allergy' | 'contraindication' | 'dose-error' | 'guideline-deviation';
  severity: 'info' | 'warning' | 'critical';
  priority: 'low' | 'medium' | 'high';
  
  // Clinical context
  title: string;
  message: string;
  clinicalContext: {
    medications?: string[];
    allergies?: string[];
    conditions?: string[];
    findings?: any;
  };
  
  // Risk assessment
  riskScore: number;
  riskLevel: 'low' | 'medium' | 'high';
  
  // Recommendations
  recommendations: string[];
  alternatives?: string[];
  
  // Alert status
  status: 'active' | 'acknowledged' | 'resolved' | 'dismissed';
  acknowledgedBy?: string;
  acknowledgedAt?: Date;
  acknowledgmentNote?: string;
  
  // Audit trail
  triggeredBy: string; // User who triggered the check
  dismissedBy?: string;
  dismissedAt?: Date;
  dismissalReason?: string;
  
  // Metadata
  source: 'automated' | 'manual' | 'ml-model';
  confidence: number; // 0-100
  
  createdAt: Date;
  updatedAt: Date;
  expiresAt?: Date;
}

export interface AlertSummary {
  totalAlerts: number;
  activeAlerts: number;
  criticalAlerts: number;
  byType: Record<Alert['alertType'], number>;
  bySeverity: Record<Alert['severity'], number>;
}

export class AlertModel {
  /**
   * Severity weights for sorting and prioritization
   */
  static readonly SEVERITY_WEIGHTS = {
    info: 1,
    warning: 5,
    critical: 10
  };

  /**
   * Determine if alert requires immediate action
   */
  static requiresImmediateAction(alert: Alert): boolean {
    return alert.severity === 'critical' || 
           alert.priority === 'high' ||
           alert.riskLevel === 'high';
  }

  /**
   * Check if alert has expired
   */
  static isExpired(alert: Alert): boolean {
    if (!alert.expiresAt) return false;
    return new Date() > alert.expiresAt;
  }

  /**
   * Generate alert title from context
   */
  static generateTitle(alertType: Alert['alertType'], context: any): string {
    switch (alertType) {
      case 'drug-interaction':
        return `Drug Interaction: ${context.drugs?.join(' + ') || 'Multiple medications'}`;
      
      case 'allergy':
        return `Allergy Alert: ${context.medication || 'Medication'} - ${context.allergen || 'Known allergy'}`;
      
      case 'contraindication':
        return `Contraindication: ${context.medication || 'Medication'} with ${context.condition || 'condition'}`;
      
      case 'dose-error':
        return `Dose Alert: ${context.medication || 'Medication'} - ${context.issue || 'Dosing concern'}`;
      
      case 'guideline-deviation':
        return `Guideline Deviation: ${context.guideline || 'Clinical guideline'}`;
      
      default:
        return 'Clinical Alert';
    }
  }

  /**
   * Calculate expiry time based on alert type
   */
  static calculateExpiry(alertType: Alert['alertType']): Date | undefined {
    const now = new Date();
    
    switch (alertType) {
      case 'drug-interaction':
      case 'contraindication':
        // These alerts remain active while medications are active
        return undefined;
      
      case 'allergy':
        // Allergy alerts don't expire (permanent)
        return undefined;
      
      case 'dose-error':
        // Dose alerts expire after 24 hours (assume corrected)
        now.setHours(now.getHours() + 24);
        return now;
      
      case 'guideline-deviation':
        // Guideline alerts expire after 7 days
        now.setDate(now.getDate() + 7);
        return now;
      
      default:
        now.setDate(now.getDate() + 30);
        return now;
    }
  }

  /**
   * Convert database row to Alert object
   */
  static fromDatabaseRow(row: any): Alert {
    return {
      id: row.id,
      patientId: row.patient_id,
      facilityId: row.facility_id,
      organizationId: row.organization_id,
      alertType: row.alert_type,
      severity: row.severity,
      priority: row.priority,
      title: row.title,
      message: row.message,
      clinicalContext: row.clinical_context,
      riskScore: row.risk_score,
      riskLevel: row.risk_level,
      recommendations: row.recommendations || [],
      alternatives: row.alternatives,
      status: row.status,
      acknowledgedBy: row.acknowledged_by,
      acknowledgedAt: row.acknowledged_at,
      acknowledgmentNote: row.acknowledgment_note,
      triggeredBy: row.triggered_by,
      dismissedBy: row.dismissed_by,
      dismissedAt: row.dismissed_at,
      dismissalReason: row.dismissal_reason,
      source: row.source,
      confidence: row.confidence,
      createdAt: row.created_at,
      updatedAt: row.updated_at,
      expiresAt: row.expires_at
    };
  }
}

export default Alert;

